import csv
from datetime import datetime, timedelta
import random

# Lista de ITEM_ID disponibles
ITEM_IDS = [
    "MLB4432316952", "MLB4413219062", "MLB4392733324", "MLB4386801008", "MLB4343872502",
    "MLB4340001198", "MLB4337228644", "MLB4326136948", "MLB4324787848", "MLB4316355190",
    "MLB4311492528", "MLB4304406542", "MLB4293496378", "MLB4293467490", "MLB4290170714",
    "MLB4290093382", "MLB4289225390", "MLB4287318088", "MLB4287302192", "MLB4281133192",
    "MLB4279481140", "MLB4276994026", "MLB4276702250", "MLB4276120118", "MLB4275744524",
    "MLB4273575930", "MLB4273027332", "MLB4259686506", "MLB4248812240", "MLB4241522188",
    "MLB4241265672", "MLB4226518256", "MLB4225328836", "MLB4219292984", "MLB4214898206",
    "MLB4206132818", "MLB4205774200", "MLB4200305618", "MLB4199827064", "MLB4195198970",
    "MLB4194886896", "MLB4185925220", "MLB4184697886", "MLB4179683462", "MLB4176025204",
    "MLB4168861488", "MLB4166340376", "MLB4166082032", "MLB4160471278", "MLB4156297248",
    "MLB4154937680", "MLB4141602146", "MLB4134233232", "MLB4130687760", "MLB4130206690",
    "MLB4127711998", "MLB4124263488", "MLB4120735208", "MLB4105782008", "MLB4104531912",
    "MLB4103543604", "MLB4097203966", "MLB4097193910", "MLB4096819080", "MLB4093560286",
    "MLB4091224450", "MLB4084255010", "MLB4076135260", "MLB4075715534", "MLB4072491478",
    "MLB4064385784", "MLB4057902078", "MLB4041053928", "MLB4015013082", "MLB4007992188",
    "MLB4006642750", "MLB3994496200", "MLB3989403978", "MLB3932980886", "MLB3924124762",
    "MLB3913984008", "MLB3898911676", "MLB3893375108", "MLB3866288374", "MLB3859645230",
    "MLB3842202456", "MLB3839292454", "MLB3836681004", "MLB3836669552", "MLB3836655204",
    "MLB3830577298", "MLB3828762772", "MLB3823895436", "MLB3813947184", "MLB3810354364",
    "MLB3800034256", "MLB3789789694", "MLB3784050086", "MLB3775035536", "MLB3763702144",
    "MLB3757942356", "MLB3757116458", "MLB3755324850", "MLB3749794156", "MLB3723901664",
    "MLB3714922602", "MLB3714337848", "MLB3690302956", "MLB3687444228", "MLB3687430524",
    "MLB3682821522", "MLB3678472462", "MLB3665566820", "MLB3593462191", "MLB3575611193",
    "MLB3570782933", "MLB3570040903", "MLB3567521459", "MLB3566815269", "MLB3560374889",
    "MLB3557523263", "MLB3555358213", "MLB3555198871", "MLB3555057041", "MLB3553007117",
    "MLB3549955497", "MLB3549936467", "MLB3548452513", "MLB3548043765", "MLB3546724503",
    "MLB3546509255", "MLB3545304551", "MLB3544186473", "MLB3543617827", "MLB3543515810",
    "MLB3542531789", "MLB3533718393", "MLB3532248363", "MLB3531602811", "MLB3525710991",
    "MLB3521614959", "MLB3521003005", "MLB3520416747", "MLB3520405303", "MLB3519541231",
    "MLB3516833123", "MLB3516522797", "MLB3515226837", "MLB3512746554", "MLB3511692993",
    "MLB3511456619", "MLB3511034319", "MLB3510283781", "MLB3509261359", "MLB3508310321",
    "MLB3507962395", "MLB3507477797", "MLB3500787419", "MLB3498220137", "MLB3497187009",
    "MLB3496393829", "MLB3496139988", "MLB3496101876", "MLB3494382481", "MLB3492637065",
    "MLB3491254785", "MLB3489834833", "MLB3488078399", "MLB3483010335", "MLB3479398081",
    "MLB3474490719", "MLB3474131193", "MLB3469104025", "MLB3465446981", "MLB3456872639",
    "MLB3448183417", "MLB3441637437", "MLB3440196655", "MLB3433235400", "MLB3431167707",
    "MLB3427169089", "MLB3426229069", "MLB3424776553", "MLB3423618250", "MLB3422917323",
    "MLB3418226859", "MLB3414470821", "MLB3411866009", "MLB3411777279", "MLB3407390455",
    "MLB3398629729", "MLB3394742467", "MLB3387261687", "MLB3386318393", "MLB3382515267",
    "MLB3374545761", "MLB3373358709", "MLB3370762497", "MLB3367783445", "MLB3362986577",
    "MLB3358556065", "MLB3349165725", "MLB3346656305", "MLB3345532283", "MLB3342582093",
    "MLB3340704535", "MLB3340572378", "MLB3340435709", "MLB3334795873", "MLB3334057583",
    "MLB3322742677", "MLB3315327807", "MLB3314287690", "MLB3301462109", "MLB3292397983",
    "MLB3283670077", "MLB3276602075", "MLB3273857658", "MLB3269776012", "MLB3257863870",
    "MLB3254371773", "MLB3244268010", "MLB3242954313", "MLB3241448542", "MLB3218281738",
    "MLB3205852265", "MLB3203200305", "MLB3203009115", "MLB3196827434", "MLB3158429584",
    "MLB3148896282", "MLB3138801847", "MLB3132297043", "MLB3124456142", "MLB3106897306",
    "MLB3106892905", "MLB3106352601", "MLB3102171031", "MLB3086996119", "MLB3069286133",
    "MLB3065962586", "MLB3061187336", "MLB3026196577", "MLB2995989198", "MLB2988026849",
    "MLB2986882753", "MLB2986304012", "MLB2941525733", "MLB2929255812", "MLB2919448813",
    "MLB2889297520", "MLB2860498536", "MLB2841925061", "MLB2821541639", "MLB2819840807",
    "MLB2798444127", "MLB2778863720", "MLB2777937337", "MLB2761410804", "MLB2761404853",
    "MLB2761325686", "MLB2761325685", "MLB2757013519", "MLB2748411463", "MLB2748402804",
    "MLB2716074299", "MLB2708202077", "MLB2708123326", "MLB2699961048", "MLB2684213520",
    "MLB2669262591", "MLB2638453818", "MLB2202276400", "MLB2177701996", "MLB2173579748",
    "MLB2122467900", "MLB2106118469", "MLB2102943411", "MLB2081557730", "MLB2081557727",
    "MLB2045540754", "MLB2019353158", "MLB2006400709", "MLB2004593726", "MLB1916660357",
    "MLB1853126292", "MLB1826338396", "MLB1813860569", "MLB1813858155", "MLB1813853929",
    "MLB1791527092", "MLB1789851876", "MLB1714244786", "MLB1674496274", "MLB1636826196",
    "MLB1632127417", "MLB1450506718", "MLB1439503311", "MLB1073354076"
]

# Fecha de inicio para generar datos (marzo de 2024)
start_date = datetime(2024, 3, 1)

# Función para generar una fecha aleatoria a partir de marzo de 2024
def random_date(start, end):
    return start + timedelta(days=random.randint(0, (end - start).days))

# Función para generar datos aleatorios
def generate_data():
    data = []
    for _ in range(200):
        item_id = random.choice(ITEM_IDS)
        ord_closed_dt = random_date(start_date, start_date + timedelta(days=30))
        price = round(random.uniform(10, 1000), 2)
        data.append([item_id, ord_closed_dt.strftime("%Y-%m-%d"), price])
    return data

# Generar datos y escribirlos en un archivo CSV
data = generate_data()
with open('data.csv', 'w', newline='') as file:
    writer = csv.writer(file)
    writer.writerow(["ITEM_ID", "ORD_CLOSED_DT", "PRICE"])
    writer.writerows(data)

print("Datos generados y guardados en data.csv")